===== /home/crazytimon/repos/geo_photo_quest/frontend/tsconfig.json =====
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}


===== /home/crazytimon/repos/geo_photo_quest/frontend/Dockerfile.prod =====
# Base image for building the app
FROM node:14 as build

# Set working directory
WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm install

# Copy source files
COPY . .

ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=${REACT_APP_API_URL}

# Build the app
RUN npm run build


===== /home/crazytimon/repos/geo_photo_quest/frontend/.dockerignore =====
node_modules
dist
uploads


===== /home/crazytimon/repos/geo_photo_quest/frontend/tailwind.config.js =====
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/index.tsx =====
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import './tailwind.css'; // Add this line
import App from './App';
import reportWebVitals from './reportWebVitals';

import './index.css';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

reportWebVitals();


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/Register.css =====
.register-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.register-container input {
  margin: 10px 0;
  padding: 10px;
  width: 200px;
}

.register-container button {
  padding: 10px 20px;
  cursor: pointer;
}

.register-container p {
  margin-top: 10px;
  color: red;
}


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/CreateQuest.tsx =====
import React, { useState } from 'react';
import axios from 'axios';
import { API_URL } from '../config';

const CreateQuest: React.FC = () => {
  const [name, setName] = useState('');
  const [message, setMessage] = useState('');

  const handleCreateQuest = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post(`${API_URL}/quests`, { name }, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      setMessage(`Quest created with ID: ${response.data._id}`);
    } catch (error) {
      setMessage('Failed to create quest');
    }
  };

  return (
    <div className="create-quest-container">
      <h2>Create Quest</h2>
      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="Quest Name"
      />
      <button onClick={handleCreateQuest}>Create Quest</button>
      <p>{message}</p>
    </div>
  );
};

export default CreateQuest;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/QuestManagement.tsx =====
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { API_URL } from '../config';
import './QuestManagement.css';

interface Photo {
  _id: string;
  path: string;
  geolocation: {
    latitude: number;
    longitude: number;
  };
  createdAt: string;
}

interface Quest {
  _id: string;
  name: string;
  token: string;
}

const QuestManagement: React.FC = () => {
  const [quests, setQuests] = useState<Quest[]>([]);
  const [selectedQuestId, setSelectedQuestId] = useState<string>('');
  const [name, setName] = useState('');
  const [photos, setPhotos] = useState<FileList | null>(null);
  const [uploadedPhotos, setUploadedPhotos] = useState<Photo[]>([]);
  const [order, setOrder] = useState<number[]>([]);
  const [message, setMessage] = useState('');

  useEffect(() => {
    const fetchQuests = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${API_URL}/quests`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        setQuests(response.data);
      } catch (error) {
        console.error('Error fetching quests:', error);
      }
    };
    fetchQuests();
  }, []);

  useEffect(() => {
    if (selectedQuestId) {
      const fetchPhotos = async () => {
        try {
          const token = localStorage.getItem('token');
          const response = await axios.get(`${API_URL}/photos`, {
            headers: {
              'Authorization': `Bearer ${token}`
            },
            params: {
              questId: selectedQuestId
            }
          });
          setUploadedPhotos(response.data);
          setOrder(response.data.map((photo: Photo, index: number) => index));
        } catch (error) {
          console.error('Error fetching photos:', error);
        }
      };
      fetchPhotos();
    } else {
      setUploadedPhotos([]);
      setOrder([]);
    }
  }, [selectedQuestId]);

  const handleCreateQuest = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post(`${API_URL}/quests`, { name }, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      setQuests([...quests, response.data]);
      setName('');
      setMessage(`Quest created with ID: ${response.data._id}`);
    } catch (error) {
      setMessage('Failed to create quest');
    }
  };

  const handleUpload = async () => {
    if (!photos || !selectedQuestId) {
      setMessage('Please select photos and a quest.');
      return;
    }

    const formData = new FormData();
    for (let i = 0; i < photos.length; i++) {
      formData.append('photos', photos[i]);
    }
    formData.append('questId', selectedQuestId);

    try {
      const token = localStorage.getItem('token');
      await axios.post(`${API_URL}/photos/upload`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${token}`
        },
      });
      setMessage('Photos uploaded successfully');
      const response = await axios.get(`${API_URL}/photos`, {
        headers: {
          'Authorization': `Bearer ${token}`
        },
        params: {
          questId: selectedQuestId
        }
      });
      setUploadedPhotos(response.data);
      setOrder(response.data.map((photo: Photo, index: number) => index));
    } catch (error) {
      setMessage('Failed to upload photos');
    }
  };

  const handleDeleteQuest = async () => {
    try {
      const token = localStorage.getItem('token');
      await axios.delete(`${API_URL}/quests/${selectedQuestId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      setQuests(quests.filter(quest => quest._id !== selectedQuestId));
      setSelectedQuestId('');
    } catch (error) {
      console.error('Error deleting quest:', error);
    }
  }

  const reorder = (startIndex: number, endIndex: number) => {
    const result = Array.from(order);
    const [removed] = result.splice(startIndex, 1);
    result.splice(endIndex, 0, removed);
    setOrder(result);

    const orderedPhotos = result.map(index => uploadedPhotos[index]);
    const route = orderedPhotos.map(photo => ({
      latitude: photo.geolocation.latitude,
      longitude: photo.geolocation.longitude,
    }));
  };

  const deletePhoto = async (photoId: string) => {
    try {
      const token = localStorage.getItem('token');
      await axios.delete(`${API_URL}/photos/${photoId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      const updatedPhotos = uploadedPhotos.filter(photo => photo._id !== photoId);
      setUploadedPhotos(updatedPhotos);
      setOrder(updatedPhotos.map((_, index) => index));
    } catch (error) {
      console.error('Error deleting photo:', error);
    }
  };

  const deleteAllPhotos = async () => {
    try {
      const token = localStorage.getItem('token');
      await axios.delete(`${API_URL}/photos/reset`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      setUploadedPhotos([]);
      setOrder([]);
    } catch (error) {
      console.error('Error deleting all photos:', error);
    }
  };

  const getCurrentQuestToken = () => {
    const currentQuest = quests.find(quest => quest._id === selectedQuestId);
    return currentQuest?.token;
  }

  return (
    <div className="p-4">
      <div className="mb-4">
        <h2 className="text-xl font-bold mb-2">Create Quest</h2>
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Quest Name"
          className="mb-2 px-4 py-2 border rounded w-full"
        />
        <button
          onClick={handleCreateQuest}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700"
        >
          Create Quest
        </button>
        <p className="mt-2 text-green-500">{message}</p>
      </div>

      <div className="mb-4">
        <h2 className="text-xl font-bold mb-2">Upload Photos</h2>
        <input
          type="file"
          multiple
          onChange={(e) => setPhotos(e.target.files)}
          className="mb-2"
        />
        <select
          onChange={(e) => setSelectedQuestId(e.target.value)}
          value={selectedQuestId}
          className="mb-2 px-4 py-2 border rounded w-full"
        >
          <option value="">Select Quest</option>
          {quests.map((quest) => (
            <option key={quest._id} value={quest._id}>{quest.name}</option>
          ))}
        </select>
        <div className="flex items-center mb-4">
          <span className="mr-2">{getCurrentQuestToken()}</span>
          <button
            onClick={handleDeleteQuest}
            className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-700 mr-2"
          >
            Delete Quest
          </button>
          <button
            onClick={handleUpload}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700 mr-2"
          >
            Upload Photos
          </button>
          <button
            onClick={deleteAllPhotos}
            className="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-700"
          >
            Delete All Photos
          </button>
        </div>
      </div>

      <div>
        <h2 className="text-xl font-bold mb-2">Manage Points</h2>
        <ul className="space-y-2">
          {order.map((index, idx) => (
            <li key={uploadedPhotos[index]._id} className="flex items-center justify-between p-2 border rounded">
              <div className="flex items-center space-x-4">
                <span>{idx + 1}. </span>
                <img src={`${API_URL}/uploads/${uploadedPhotos[index].path}`} alt={uploadedPhotos[index].path} className="w-16 h-16 rounded"/>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => reorder(idx, idx - 1)}
                  disabled={idx === 0}
                  className="px-2 py-1 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 disabled:opacity-50"
                >
                  Up
                </button>
                <button
                  onClick={() => reorder(idx, idx + 1)}
                  disabled={idx === order.length - 1}
                  className="px-2 py-1 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 disabled:opacity-50"
                >
                  Down
                </button>
                <button
                  onClick={() => deletePhoto(uploadedPhotos[index]._id)}
                  className="px-2 py-1 bg-red-500 text-white rounded hover:bg-red-700"
                >
                  Delete
                </button>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default QuestManagement;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/MainLayout.css =====
.container {
    max-width: 1200px;
    margin: 0 auto;
  }

  nav a {
    text-decoration: none;
    color: inherit;
    padding: 8px 16px;
    border-radius: 4px;
    transition: background-color 0.3s;
  }

  nav a:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  button {
    padding: 8px 16px;
    margin-left: 8px;
    border: none;
    cursor: pointer;
  }

  button:hover {
    background-color: #357abd;
  }


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/PhotoUpload.tsx =====
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { API_URL } from '../config';

axios.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
}, (error) => {
  return Promise.reject(error);
});

interface Quest {
  _id: string;
  name: string;
}

const PhotoUpload: React.FC = () => {
  const [photos, setPhotos] = useState<FileList | null>(null);
  const [message, setMessage] = useState('');
  const [quests, setQuests] = useState<Quest[]>([]);
  const [selectedQuestId, setSelectedQuestId] = useState('');

  useEffect(() => {
    const fetchQuests = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${API_URL}/quests`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        setQuests(response.data);
      } catch (error) {
        console.error('Error fetching quests:', error);
      }
    };
    fetchQuests();
  }, []);

  const handleUpload = async () => {
    if (!photos || !selectedQuestId) {
      setMessage('Please select photos and a quest.');
      return;
    }

    const formData = new FormData();
    for (let i = 0; i < photos.length; i++) {
      formData.append('photos', photos[i]);
    }
    formData.append('questId', selectedQuestId);

    try {
      const token = localStorage.getItem('token');
      await axios.post(`${API_URL}/photos/upload`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${token}`
        },
      });
      setMessage('Photos uploaded successfully');
    } catch (error) {
      setMessage('Failed to upload photos');
    }
  };

  return (
    <div className="photo-upload-container">
      <h2>Upload Photos</h2>
      <input
        type="file"
        multiple
        onChange={(e) => setPhotos(e.target.files)}
      />
      <select onChange={(e) => setSelectedQuestId(e.target.value)} value={selectedQuestId}>
        <option value="">Select Quest</option>
        {quests.map((quest) => (
          <option key={quest._id} value={quest._id}>{quest.name}</option>
        ))}
      </select>
      <button onClick={handleUpload}>Upload</button>
      <p>{message}</p>
    </div>
  );
};

export default PhotoUpload;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/Register.tsx =====
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { API_URL } from '../config';
import './Register.css';

const Register: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');
  const navigate = useNavigate();

  const handleRegister = async () => {
    try {
      const response = await axios.post(`${API_URL}/auth/register`, { username, password });
      setMessage('Registered successfully');
      navigate('/login'); // Redirect to the login page
    } catch (error) {
      setMessage('Registration failed');
    }
  };

  return (
    <div className="register-container">
      <h2>Register</h2>
      <input
        type="text"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        placeholder="Username"
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
      />
      <button onClick={handleRegister}>Register</button>
      <p>{message}</p>
    </div>
  );
};

export default Register;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/Map.tsx =====
import React, { useEffect, useRef, useState } from 'react';
import { MapContainer, TileLayer, Marker, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import axios from 'axios';
import L, { Control } from 'leaflet';
import 'leaflet-routing-machine';
import { API_URL } from '../config';
import { useNavigate } from 'react-router-dom';

interface Photo {
  _id: string;
  path: string;
  geolocation: {
    latitude: number;
    longitude: number;
  };
}

interface Quest {
  _id: string;
  name: string;
}

interface MapProps {
  route: { latitude: number; longitude: number }[];
}

const createIcon = (photoPath: string) => {
  const svgIcon = `
    <svg width="60" height="60" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <clipPath id="clipCircle">
          <circle cx="30" cy="30" r="28" fill="#FFFFFF" />
        </clipPath>
      </defs>
      <circle cx="30" cy="30" r="30" fill="#FFFFFF" stroke="#000000" stroke-width="2"/>
      <image href="${API_URL}/uploads/${photoPath}" x="2" y="2" height="56" width="56" clip-path="url(#clipCircle)" />
    </svg>
  `;
  return L.divIcon({
    html: svgIcon,
    className: '',
    iconSize: [60, 60],
    iconAnchor: [30, 30]
  });
};

const RoutingControl = ({ route }: { route: { latitude: number; longitude: number }[] }) => {
  const map = useMap();
  const control = useRef<Control | null>(null);

  useEffect(() => {
    if (route.length > 1) {
      if (control.current) {
        map.removeControl(control.current);
      }

      const waypoints = route.map(point => L.latLng(point.latitude, point.longitude));

      control.current = L.Routing.control({
        waypoints,
        routeWhileDragging: true,
        showAlternatives: false,
        waypointMode: 'snap', // Snap the route to roads
        addWaypoints: false,
        fitSelectedRoutes: true,
        show: false,
      }).addTo(map);
      // control.current.hide(); there is some issue with styles, because class to hide control is added
    }
  }, [route, map]);

  // https://gis.stackexchange.com/questions/324016/leaflet-routing-machine-show-option-doesnt-work
  document.getElementsByClassName('leaflet-control-container')[0]?.remove()
  return null;
};

const Map: React.FC<MapProps> = ({ route }) => {
  const [photos, setPhotos] = useState<Photo[]>([]);
  const [quests, setQuests] = useState<Quest[]>([]);
  const [selectedQuest, setSelectedQuest] = useState<string>('');
  const [questRoute, setQuestRoute] = useState<{ latitude: number; longitude: number }[]>([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchQuests = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${API_URL}/quests`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        setQuests(response.data);
      } catch (error: any) {
        console.error('Error fetching quests:', error);
        if (error.response && error.response.status === 401) {
          navigate('/login');
        }
      }
    };
    fetchQuests();
  }, [navigate]);

  useEffect(() => {
    if (selectedQuest) {
      const fetchPhotos = async () => {
        try {
          const token = localStorage.getItem('token');
          const response = await axios.get(`${API_URL}/photos`, {
            headers: {
              'Authorization': `Bearer ${token}`
            },
            params: { questId: selectedQuest }
          });
          const photosData = response.data;
          setPhotos(photosData);
          const routeData = photosData.map((photo: Photo) => ({
            latitude: photo.geolocation.latitude,
            longitude: photo.geolocation.longitude,
          }));
          setQuestRoute(routeData);
        } catch (error: any) {
          console.error('Error fetching photos:', error);
          if (error.response && error.response.status === 401) {
            navigate('/login');
          }
        }
      };
      fetchPhotos();
    }
  }, [selectedQuest, navigate]);

  return (
    <div className="flex flex-col items-center">
      <div className="w-full max-w-xs mb-4">
        <label htmlFor="quest" className="block text-sm font-medium text-gray-700">Select Quest:</label>
        <select
          id="quest"
          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
          value={selectedQuest}
          onChange={(e) => setSelectedQuest(e.target.value)}
        >
          <option value="">Select a quest</option>
          {quests.map(quest => (
            <option key={quest._id} value={quest._id}>{quest.name}</option>
          ))}
        </select>
      </div>
      <MapContainer center={[50.103333, 14.450027]} zoom={13} style={{ height: '80vh', width: '100%' }}>
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        />
        {photos.map(photo => (
          <Marker
            key={photo._id}
            position={[photo.geolocation.latitude, photo.geolocation.longitude]}
            icon={createIcon(photo.path)}
          />
        ))}
        <RoutingControl route={questRoute} />
      </MapContainer>
    </div>
  );
};

export default Map;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/Auth.css =====
.auth-container {
    max-width: 400px;
    margin: 50px auto;
    padding: 20px;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    background-color: #fff;
  }

  .tabs {
    display: flex;
    justify-content: space-around;
    margin-bottom: 20px;
  }

  .tab {
    padding: 10px 20px;
    cursor: pointer;
    border: none;
    background-color: #e2e8f0;
    color: #333;
    font-weight: bold;
    transition: all 0.3s ease;
  }

  .tab:hover {
    background-color: #cbd5e0;
  }

  .tab.active {
    background-color: #4a90e2;
    color: #fff;
    border-bottom: none;
  }

  .form-container {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  input {
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #e2e8f0;
    border-radius: 4px;
    width: 100%;
  }

  button {
    padding: 10px;
    background-color: #4a90e2;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
    width: 100%;
  }

  button:hover {
    background-color: #357abd;
  }

  p {
    color: #e53e3e;
    margin-top: 10px;
    text-align: center;
  }


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/QuestSelector.tsx =====
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { API_URL } from '../config';

interface Quest {
  _id: string;
  name: string;
}

interface QuestSelectorProps {
  setSelectedQuestId: (questId: string) => void;
}

const QuestSelector: React.FC<QuestSelectorProps> = ({ setSelectedQuestId }) => {
  const [quests, setQuests] = useState<Quest[]>([]);

  useEffect(() => {
    const fetchQuests = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${API_URL}/quests`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        setQuests(response.data);
      } catch (error) {
        console.error('Error fetching quests:', error);
      }
    };
    fetchQuests();
  }, []);

  return (
    <div className="p-4 bg-white rounded shadow-md">
      <label htmlFor="quest" className="block text-sm font-medium text-gray-700">Select Quest:</label>
      <select
        id="quest"
        className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        onChange={(e) => setSelectedQuestId(e.target.value)}
      >
        <option value="">Select a quest</option>
        {quests.map(quest => (
          <option key={quest._id} value={quest._id}>{quest.name}</option>
        ))}
      </select>
    </div>
  );
};

export default QuestSelector;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/QuestManagement.css =====
.quest-management-container {
  padding: 20px;
}

.quest-management-container input, .quest-management-container select, .quest-management-container button {
  margin: 10px 0;
  padding: 10px;
}

.quest-management-container ul {
  list-style: none;
  padding: 0;
}

.quest-management-container li {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.quest-management-container img {
  margin-right: 10px;
}


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/Auth.tsx =====
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { API_URL } from '../config';
import './Auth.css';

const Auth: React.FC = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');
  const navigate = useNavigate();

  const handleAuth = async () => {
    try {
      const endpoint = isLogin ? `${API_URL}/auth/login` : `${API_URL}/auth/register`;
      const response = await axios.post(endpoint, { username, password });
      if (isLogin) {
        localStorage.setItem('token', response.data.token);
        setMessage('Logged in successfully');
        navigate('/');
      } else {
        setMessage('Registered successfully');
        setIsLogin(true);
      }
    } catch (error) {
      setMessage(isLogin ? 'Login failed' : 'Registration failed');
    }
  };

  return (
    <div className="auth-container">
      <div className="tabs">
        <button
          className={`tab ${isLogin ? 'active' : ''}`}
          onClick={() => setIsLogin(true)}
        >
          Login
        </button>
        <button
          className={`tab ${!isLogin ? 'active' : ''}`}
          onClick={() => setIsLogin(false)}
        >
          Register
        </button>
      </div>
      <div className="form-container">
        <h2 className="text-center mb-4">{isLogin ? 'Login' : 'Register'}</h2>
        <input
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          placeholder="Username"
          className="mb-2 p-2 border rounded"
        />
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="Password"
          className="mb-2 p-2 border rounded"
        />
        <button onClick={handleAuth} className="w-full py-2 bg-blue-500 text-white rounded">
          {isLogin ? 'Login' : 'Register'}
        </button>
        <p className="text-red-500 mt-2">{message}</p>
      </div>
    </div>
  );
};

export default Auth;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/Login.tsx =====
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { API_URL } from '../config';
import './Login.css';

const Login: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');
  const navigate = useNavigate();

  const handleLogin = async () => {
    try {
      const response = await axios.post(`${API_URL}/auth/login`, { username, password });
      localStorage.setItem('token', response.data.token);
      setMessage('Logged in successfully');
      navigate('/');
    } catch (error) {
      setMessage('Login failed');
    }
  };

  return (
    <div className="login-container">
      <h2>Login</h2>
      <input
        type="text"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        placeholder="Username"
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
      />
      <button onClick={handleLogin}>Login</button>
      <p>{message}</p>
    </div>
  );
};

export default Login;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/Login.css =====
.login-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.login-container input {
  margin: 10px 0;
  padding: 10px;
  width: 200px;
}

.login-container button {
  padding: 10px 20px;
  cursor: pointer;
}

.login-container p {
  margin-top: 10px;
  color: red;
}

===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/MainLayout.tsx =====
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import './MainLayout.css';

const MainLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/auth');
  };

  return (
    <div className="flex flex-col min-h-screen">
      <header className="bg-gray-800 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <div className="text-lg font-semibold">
            <Link to="/">Geo Photo Quest</Link>
          </div>
          <nav className="space-x-4 flex items-center">
            {token ? (
              <>
                <Link to="/" className="hover:text-gray-300">Map</Link>
                <Link to="/quest-management" className="hover:text-gray-300 whitespace-nowrap">Quest Management</Link>
                <button
                  onClick={handleLogout}
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition"
                >
                  Logout
                </button>
              </>
            ) : (
              <Link to="/auth" className="hover:text-gray-300">Login/Register</Link>
            )}
          </nav>
        </div>
      </header>
      <main className="flex-grow container mx-auto p-4">{children}</main>
    </div>
  );
};

export default MainLayout;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/NavBar.css =====
.navbar {
  display: flex;
  justify-content: space-around;
  background-color: #333;
  padding: 10px;
}

.navbar a {
  color: white;
  text-decoration: none;
  padding: 14px 20px;
}

.navbar a:hover {
  background-color: #ddd;
  color: black;
}

===== /home/crazytimon/repos/geo_photo_quest/frontend/src/components/NavBar.tsx =====
import React from 'react';
import { Link } from 'react-router-dom';
import './NavBar.css';

const NavBar: React.FC = () => {
  return (
    <nav className="bg-gray-800 p-4">
      <div className="container mx-auto flex justify-between items-center">
        <div className="text-white text-lg font-bold">
          <Link to="/" className="hover:text-gray-300">Map</Link>
        </div>
        <div className="space-x-4">
          <Link to="/quest-management" className="text-white hover:text-gray-300">Quest Management</Link>
          <Link to="/login" className="text-white hover:text-gray-300">Login</Link>
          <Link to="/register" className="text-white hover:text-gray-300">Register</Link>
        </div>
      </div>
    </nav>
  );
};

export default NavBar;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/tailwind.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/config.ts =====
export const API_URL = process.env.REACT_APP_API_URL

===== /home/crazytimon/repos/geo_photo_quest/frontend/src/logo.svg =====
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

===== /home/crazytimon/repos/geo_photo_quest/frontend/src/reportWebVitals.ts =====
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/index.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/App.tsx =====
import React, { useState } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Map from './components/Map';
import QuestManagement from './components/QuestManagement';
import MainLayout from './components/MainLayout';
import Auth from './components/Auth';

const App: React.FC = () => {
  const [route, setRoute] = useState<{ latitude: number; longitude: number }[]>([]);

  return (
    <Router>
      <MainLayout>
        <Routes>
          <Route path="/auth" element={<Auth />} />
          <Route path="/" element={<Map route={route} />} />
          <Route path="/quest-management" element={<QuestManagement />} />
        </Routes>
      </MainLayout>
    </Router>
  );
};

export default App;


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/setupTests.ts =====
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/App.test.tsx =====
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/App.css =====
/* Common styles for all buttons */
button {
  padding: 10px 15px;
  font-size: 14px;
  border: none;
  border-radius: 4px;
  background-color: #007bff;
  color: #fff;
  cursor: pointer;
  transition: background-color 0.3s;
  margin: 5px;
}

button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

button:not(:disabled):hover {
  background-color: #0056b3;
}

/* Specific styles for the order buttons */
.order-button {
  padding: 5px 10px;
  font-size: 12px;
}

/* Ensure ManagePoints.css has a lower specificity */
.manage-points-container .order-button {
  padding: 5px 10px;
  font-size: 12px;
}

/* Additional styles for layout */
.App-content {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: flex-start;
  padding: 20px;
}

.Map-container {
  flex: 1;
  margin-right: 20px;
}

.ManagePoints-container {
  flex: 1;
  max-width: 300px; /* Adjust as needed */
  overflow-y: auto;
}

h1 {
  font-size: 1.5em;
}


===== /home/crazytimon/repos/geo_photo_quest/frontend/src/react-app-env.d.ts =====
/// <reference types="react-scripts" />


===== /home/crazytimon/repos/geo_photo_quest/frontend/Dockerfile.dev =====
# Development Dockerfile

# Use a base image with Node.js
FROM node:14

# Set working directory
WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm install

# Copy source files
COPY . .

# Set environment variable
ENV NODE_ENV=development

# Expose the port the app runs on
EXPOSE 3000

# Start the development server
CMD ["npm", "start"]


===== /home/crazytimon/repos/geo_photo_quest/frontend/postcss.config.js =====
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


===== /home/crazytimon/repos/geo_photo_quest/frontend/package.json =====
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/leaflet-routing-machine": "^3.2.8",
    "@types/node": "^16.18.98",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "axios": "^1.7.2",
    "leaflet": "^1.9.4",
    "leaflet-routing-machine": "^3.2.12",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-leaflet": "^4.2.1",
    "react-router-dom": "^6.23.1",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "PORT=5000 react-scripts start",
    "build": "PORT=5000 react-scripts build",
    "test": "PORT=5000 react-scripts test",
    "eject": "PORT=5000 react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/leaflet": "^1.9.12",
    "@types/react-leaflet": "^3.0.0",
    "@types/react-router-dom": "^5.3.3",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.4"
  }
}


